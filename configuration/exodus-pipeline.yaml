AWSTemplateFormatVersion: 2010-09-09

Description: Configuration for exodus-cdn CodePipeline

Parameters:
  env:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
    Default: dev
    Description: The environment for which resources are intended
  oai:
    Type: String
    Description: The origin access identity ID associated with the environment
  repoOwner:
    Type: String
    Default: release-engineering
    Description: The parent of the targeted repository
  repoName:
    Type: String
    Default: exodus-lambda
    Description: The targeted repository
  repoBranch:
    Type: String
    Default: None
    Description: The source branch of the targeted repository
  githubToken:
    Type: String
    Description: A GitHub access token token to authorize webhooks
  region:
    Type: String
    Default: us-east-1
    Description: The region in which resources are established
  email:
    Type: String
    Default: project-exodus@redhat.com
    Description: The email address to which notifications are sent
  project:
    Type: String
    Default: exodus
    Description: The project name under which resources are created
  useCloudTrail:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    Description: Determines whether to create CloudTrail resources
  codebuildrole:
    Type: String
    Default: None
    Description: The IAM Role ARN for CodeBuild resource
  cloudformationrole:
    Type: String
    Default: None
    Description: The IAM Role ARN for CloudFormation resource
  codepipelinerole:
    Type: String
    Default: None
    Description: The IAM Role ARN for CodePipeline resource
  cloudwatcheventrole:
    Type: String
    Default: None
    Description: The IAM Role ARN for CloudWatch resource
  lambdafunctionrole:
    Type: String
    Default: None
    Description: The IAM Role ARN for Lambda Function resource

Conditions:
  IsDev:
    !Equals [!Ref env, dev]
  IsStage:
    !Equals [!Ref env, stage]
  IsProd:
    !Equals [!Ref env, prod]
  NotProd:
    !Not [!Equals [!Ref env, prod]]
  NoBranch:
    !Equals [!Ref repoBranch, None]
  CreateCloudTrail:
    !And [!Condition IsProd, !Equals [!Ref useCloudTrail, true]]

Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${project}-sns-${env}
      Subscription:
        - Endpoint: !Ref email
          Protocol: email

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub ${project}-sns-${env}-topic-policy
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: "*"
            Principal: "*"
      Topics:
        - !Ref SNSTopic

  CodePipelineNotification:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      Name: !Sub ${project}-pipeline-${env}
      DetailType: FULL
      EventTypeIds:
        - codepipeline-pipeline-pipeline-execution-failed
      Resource:
        !Sub arn:aws:codepipeline:${region}:${AWS::AccountId}:${CodePipeline}
      Targets:
        - TargetType: SNS
          TargetAddress: !Sub arn:aws:sns:${region}:${AWS::AccountId}:${project}-sns-${env}
    DependsOn: CodePipeline

  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Condition: NotProd
    Properties:
      Name: !Sub ${project}-pipeline-${env}
      AuthenticationConfiguration:
        SecretToken: !Ref githubToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals:
            !If
              - NoBranch
              - !If
                - IsDev
                - refs/heads/master
                - refs/heads/deploy
              - !Sub refs/heads/${repoBranch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
    DependsOn: CodePipeline

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${project}-pipeline-${env}
      ArtifactStore:
        Type: S3
        Location: !Sub ${project}-pipeline-artifacts
      RoleArn: !Sub ${codepipelinerole}
      Stages:
        # Create Github source for dev, stage pipelines
        - Name: Source
          Actions:
            - Name: Source
              Namespace: SourceVars
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref repoOwner
                Repo: !Ref repoName
                Branch:
                  !If
                    - NoBranch
                    - !If
                      - IsDev
                      - master
                      - deploy
                    - !Ref repoBranch
                OAuthToken: !Ref githubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
            # Create additional S3 source for prod pipeline
            - !If
              - IsProd
              - Name: S3Source
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Provider: S3
                  Version: 1
                Region: !Ref region
                Configuration:
                  S3Bucket: !Sub ${project}-pipeline-artifacts
                  S3ObjectKey: build-stage
                  PollForSourceChanges: false
                OutputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 2
              - !Ref AWS::NoValue
        # Create build stage for dev, stage pipelines
        - !If
          - NotProd
          - Name: Build
            Actions:
              - !If
                - IsStage
                - Name: Verify
                  ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Provider: CodeBuild
                    Version: 1
                  Region: !Ref region
                  Configuration:
                    EnvironmentVariables:
                      !Sub '[
                        {"name": "REPO_OWNER", "value": "${repoOwner}", "type": "PLAINTEXT"},
                        {"name": "REPO_NAME", "value": "${repoName}", "type": "PLAINTEXT"},
                        {"name": "REPO_BRANCH", "value": "#{SourceVars.BranchName}", "type": "PLAINTEXT"},
                        {"name": "COMMIT_ID", "value": "#{SourceVars.CommitId}", "type": "PLAINTEXT"},
                        {"name": "PROJECT", "value": "${project}", "type": "PLAINTEXT"}
                      ]'
                    ProjectName: !Sub ${project}-verify-source
                  InputArtifacts:
                    - Name: SourceArtifact
                  RunOrder: 1
                - !Ref AWS::NoValue
              - Name: Build
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                Region: !Ref region
                Configuration:
                  EnvironmentVariables:
                    !Sub '[{"name": "ENV_TYPE", "value": "${env}", "type": "PLAINTEXT"},
                    {"name": "PROJECT", "value": "${project}", "type": "PLAINTEXT"}]'
                  ProjectName: !Sub ${project}-lambda-build
                InputArtifacts:
                  - Name: SourceArtifact
                OutputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 2
          - !Ref AWS::NoValue
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
                ParameterOverrides:
                  !Sub '{"env": "${env}", "oai": "${oai}", "project": "${project}", "lambdafunctionrole":"${lambdafunctionrole}"}'
                RoleArn: !Sub ${cloudformationrole}
                StackName: !Sub ${project}-lambda-${env}
                TemplatePath: BuildArtifact::exodus-lambda-pkg.yaml
              InputArtifacts:
                - Name: BuildArtifact
        - Name: Test
          Actions:
            - Name: IntegrationTests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Region: !Ref region
              Configuration:
                EnvironmentVariables:
                  !Sub '[{"name": "STACK_NAME", "value": "${project}-lambda-${env}", "type": "PLAINTEXT"}]'
                ProjectName: !Sub ${project}-integration-tests
              InputArtifacts:
                - Name: SourceArtifact
        # Create promote stage for stage pipeline
        - !If
          - IsStage
          - Name: Promote
            Actions:
              - Name: Approve
                ActionTypeId:
                  Category: Approval
                  Owner: AWS
                  Provider: Manual
                  Version: 1
                Configuration:
                  CustomData: "Approval required for pipeline promotion"
                  NotificationArn: !Sub arn:aws:sns:${region}:${AWS::AccountId}:${project}-sns-${env}
          - !Ref AWS::NoValue
        - Name: Upload
          Actions:
            - Name: Upload
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Region: !Ref region
              Configuration:
                BucketName: !Sub ${project}-pipeline-artifacts
                ObjectKey: !Sub build-${env}
                Extract: false
              InputArtifacts:
                - Name: BuildArtifact

  CodePipelineEventRule:
    Type: AWS::Events::Rule
    # Create event rule for prod pipeline
    Condition: IsProd
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - !Sub ${project}-pipeline-artifacts
            key:
              - build-stage
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${region}:${AWS::AccountId}:${project}-pipeline-prod
          RoleArn: !Sub ${cloudwatcheventrole}
          Id: !Ref CodePipeline

  CodePipelineCloudTrail:
    Type: AWS::CloudTrail::Trail
    # Create trail for prod pipeline
    Condition: CreateCloudTrail
    Properties:
      S3BucketName: !Sub ${project}-cloudtrail-logs
      EventSelectors:
        - DataResources:
          - Type: AWS::S3::Object
            Values:
              - "arn:aws:s3:::"
          ReadWriteType: WriteOnly
          IncludeManagementEvents: false
      IsLogging: true
    DependsOn: CloudTrailBucketPolicy

  CodePipelineBucket:
    Type: AWS::S3::Bucket
    # Create artifact bucket for dev pipeline
    Condition: IsDev
    Properties:
      BucketName: !Sub ${project}-pipeline-artifacts
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  CodePipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    # Create artifact bucket policy for dev pipeline
    Condition: IsDev
    Properties:
      Bucket: !Sub ${project}-pipeline-artifacts
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "s3:*"
            Principal:
              Service:
                - s3.amazonaws.com
            Resource: !Sub arn:aws:s3:::${project}-pipeline-artifacts
    DependsOn: CodePipelineBucket

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    # Create bucket for cloudtrail logs
    Condition: CreateCloudTrail
    Properties:
      BucketName: !Sub ${project}-cloudtrail-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Status: "Enabled"
            ExpirationInDays: 1

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    #Create bucket policy for cloudtrail logs
    Condition: CreateCloudTrail
    Properties:
      Bucket: !Sub ${project}-cloudtrail-logs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${project}-cloudtrail-logs
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${project}-cloudtrail-logs/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
    DependsOn: CloudTrailBucket

  VerifySourceProject:
    Type: AWS::CodeBuild::Project
    # Create verify source project for stage pipeline
    Condition: IsStage
    Properties:
      Name: !Sub ${project}-verify-source
      ServiceRole: !Sub ${codebuildrole}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 cp s3://$PROJECT-pipeline-artifacts/.whitelist.gpg .whitelist.gpg
                - gpg --import .whitelist.gpg
                - git clone https://github.com/$REPO_OWNER/$REPO_NAME.git -b $REPO_BRANCH
                - cd ./$REPO_NAME
                - git verify-tag $(git describe --exact-match $COMMIT_ID)
                - aws s3 cp .whitelist.gpg s3://$PROJECT-pipeline-artifacts/.whitelist.gpg
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 10

  LambdaBuildProject:
    Type: AWS::CodeBuild::Project
    # Create CodeBuild project for dev pipeline
    Condition: IsDev
    Properties:
      Name: !Sub ${project}-lambda-build
      ServiceRole: !Sub ${codebuildrole}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - ./scripts/build-package
          artifacts:
            files:
              - ./package/exodus-lambda-pkg.yaml
            discard-paths: yes
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  IntegrationTestsProject:
    Type: AWS::CodeBuild::Project
    Condition: IsDev
    # Create CodeBuild project for running integration tests against the pipeline
    Properties:
      Name: !Sub ${project}-integration-tests
      ServiceRole: !Sub ${codebuildrole}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
                - pip install --upgrade pip
                - pip install tox
            build:
              commands:
                - tox -e integration-tests
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 15

  RollbackProject:
    Type: AWS::CodeBuild::Project
    Condition: IsDev
    # Create CodeBuild project for re-deploying the last successful lambda stack
    Properties:
      Name: !Sub ${project}-rollback
      ServiceRole: !Sub ${codebuildrole}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 cp s3://$PROJECT-pipeline-artifacts/build-$ENV_TYPE .
                - unzip build-$ENV_TYPE
                - aws cloudformation deploy --template-file exodus-lambda-pkg.yaml --capabilities CAPABILITY_NAMED_IAM --stack-name $PROJECT-lambda-$ENV_TYPE --parameter-overrides env=$ENV_TYPE project=$PROJECT oai=$OAI
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 10

  RollbackEventRule:
    Type: AWS::Events::Rule
    # Create event rule for rollback
    Properties:
      EventPattern:
        resources:
          - !Sub arn:aws:codepipeline:${region}:${AWS::AccountId}:${project}-pipeline-${env}
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Action Execution State Change
        detail:
          state:
            - FAILED
          stage:
            - Test
          action:
            - IntegrationTests
      Targets:
        - Arn: !Sub arn:aws:codebuild:${region}:${AWS::AccountId}:project/${project}-rollback
          RoleArn: !Sub ${cloudwatcheventrole}
          Id: !Sub ${project}-rollback
          Input: !Sub '{"environmentVariablesOverride": [
            {"name": "PROJECT", "value": "${project}", "type": "PLAINTEXT"},
            {"name": "OAI", "value": "${oai}", "type": "PLAINTEXT"},
            {"name": "ENV_TYPE", "value": "${env}", "type": "PLAINTEXT"}]}'
        - Arn: !Sub arn:aws:sns:${region}:${AWS::AccountId}:${project}-sns-${env}
          Id: !Sub ${project}-notify-rollback-${env}


Outputs:
  CodePipeline:
    Description: exodus pipeline name
    Value: !Ref CodePipeline
  CodePipelineBucket:
    Description: exodus pipeline artifact bucket ARN
    Value: !Sub arn:aws:s3:::${project}-pipeline-artifacts
  LambdaBuildProject:
    Description: exodus CodeBuild project ARN
    Value: !Sub arn:aws:codebuild:${region}:${AWS::AccountId}:project/${project}-lambda-build
  SNSTopic:
    Description: exodus SNS topic ARN
    Value: !Ref SNSTopic
